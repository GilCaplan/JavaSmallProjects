package matrice;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class Multiplication {
	public static void main(String[] args) throws FileNotFoundException {
		//
		List<int[][]> matrices = newMatrice("inputa");
		
		int[][] a = matrices.get(0);
		PrintMatrice(a);
		a= ChangeRows(a, getRowActions("actionrow"));
		int[][] b = matrices.get(1);
		
		
//		int[][] c = matrices.get(2);
//		int[][] d = matrices.get(3);
//		PrintMatrice(MulMatrices(b,a));
	}
	// functions between matrices: additionM(m1, m2), trace(m), mulMatrices(m1,m2k), PrintMatrice(m) 
	// between rows: switchRR(m, ri, rj), mulR(m, r, alpha), addRiRj(m, ri, rj, alpha)- ri=ri+alpha*rj
	public static int[][] ChangeRows(int[][] m, List<String[]> getRowActions){// does almetric operations
		for(String[] action : getRowActions) {
			switch(action[0]){
				case "swap":// 2, 3
					m = switchRR(m, Integer.valueOf(action[1])-1, Integer.valueOf(action[2])-1);
					PrintMatrice(m);
					break;
				case "scalar":
					if(action[4] != "1") {
						m = mulR(m, Integer.valueOf(action[1])-1, Integer.valueOf(action[2])-1, Integer.valueOf(action[3]));
					}
					else {
						m = mulR(m, Integer.valueOf(action[1])-1, Integer.valueOf(action[2]),Integer.valueOf(action[3]));
					}
					PrintMatrice(m);
					break;
				case "row switch":
					m = addRiRj(m, Integer.valueOf(action[1])-1, Integer.valueOf(action[2])-1, Integer.valueOf(action[3]));
					PrintMatrice(m);
					break;
				default:
					break;
			}
		}
		return m;
	}
	public static int[][] muls(int[][] A, int num){
		int[][] mulscalar = new int[A.length][A[0].length];
		for(int i=0; i< A.length; i++) {
			for(int j=0; j< A[0].length; j++) {
				mulscalar[i][j] = A[i][j] * num; 
			}
		}
		return mulscalar;
	}
	public static int[][] additionM(int[][] A, int[][] B){
		if(A.length != B.length || A[0].length != B[0].length) {
			return new int[0][0];
		}
		int[][] AplusB = new int[A.length][A[0].length];
		for(int i=0; i< A.length; i++) {
			for(int j=0; j< A[0].length; j++) {
				AplusB[i][j] = A[i][j] + B[i][j]; 
			}
		}
		return AplusB;
	}
	public static int[][] trace(int[][] A){
		int[][] At = new int[A[0].length][A.length];
		for(int i=0; i< A.length; i++) {
			for(int j=0; j< A[0].length; j++) {
				At[j][i] = A[i][j]; 
			}
		}
		return At;
	}
	public static int[][] MulMatrices(int[][] A, int[][] B){//multiply two matrices
		if(A[0].length != B.length) {//a.length = column, a[0].length = row
			System.out.println("cant");
			return new int[][] {};
		}
		int colA = A.length, rowB = B[0].length;
		int[][] newMatrice = new int[colA][rowB];
		for(int col = 0; col< colA; col++) {//col
			for (int row=0; row< rowB; row++) {//row
				newMatrice[col][row] = mul(A, B, col, row);
			}
		}
		
		return newMatrice;
	}
	public static int mul(int[][] A, int[][] B, int col, int row){
		int len =A[0].length, sum =0;
		for(int i = 0; i< len; i++) {
			sum+= A[col][i]*B[i][row];
		}
		return sum;
	}
	public static void PrintMatrice(int[][] A) {
		if(A.length == 0 || A[0].length ==0) {
			System.out.println("Error in multiplication");
			return;
		}
		System.out.println();
		for (int row=0; row< A.length; row++) {//row
			System.out.println();//col
			for(int col = 0; col < A[0].length; col++) {
				System.out.print(A[row][col] + " ");
		}
		}
	}
	public static int[] getR(int[][] m, int r){//m[0].length
		int[] newR = new int[m[0].length];
		for(int i=0; i< m[0].length; i++) {
			newR[i] = m[r][i];
		}
		return newR;
	}
	public static int[][] mulR(int[][] m, int r, int alpha, int bottom) {//times a certain row by a scalar number
		int[] rowi = getR(m, r);
		for(int i=0; i< rowi.length; i++) {
			rowi[i] = (int)(rowi[i]*alpha)/bottom;
		}
		m[r] = rowi;//switch the old row with the changed row
		return m;
	}
	public static int[][] addRiRj(int[][] m, int ri, int rj, double alpha){
		int[] rowi = getR(m, ri);
		int[] rowj = getR(m, rj);
		for(int i=0; i< rowi.length; i++) {
			rowi[i] = (int) (rowi[i]+ rowj[i]*alpha);
		}
		m[ri] = rowi;
		return m;
	}
	public static int[][] switchRR(int[][] m, int ri, int rj){
		int[] rowi = getR(m, ri);
		int[] rowj = getR(m, rj);
		m[rj] = rowi;
		m[ri] = rowj;
		return m;
	}
	public static List<int[][]> newMatrice(String filename) throws FileNotFoundException {
		Scanner reader = new Scanner(new File("C:\\Users\\USER\\eclipse-workspace\\matrice\\src\\"+filename+".txt"));
		List<List<String[]>> matrices =  new ArrayList<List<String[]>>();//matrices from the file
		List<String[]> s = new ArrayList<String[]>();//string data for that matrice
		List<int[][]> mat =  new ArrayList<int[][]>();//all the matrices that we want to return
		while (reader.hasNextLine()) {
	        String data = reader.nextLine();
	        if(data.length() > 0 || data.contains("[a-bA-B]+")) {
	        	String[] l = data.split("\\s");
		        s.add(l);
	        }
	        else {
		        matrices.add(s);
	        	s = new ArrayList<String[]>();
	        }
	    }
	    reader.close();int[][] m;
	    for(int n=0; n < matrices.size();n++) {
	    	s = matrices.get(n);
	    	if(s.size() == 0) {
	    		return mat;
	    	}
			m = new int[s.size()][s.get(0).length];
			for(int i=0; i< s.size(); i++) {
				for(int j=0; j< s.get(i).length; j++) {
					m[i][j] = s.get(i)[j] != ""|| s.get(i)[j] != " "?Integer.valueOf(s.get(i)[j]): -999;
				}
				
			}
			mat.add(m);
	    }
		return mat;
	}
	public static List<String[]> getRowActions(String filename) throws FileNotFoundException {
		Scanner reader = new Scanner(new File("C:\\Users\\USER\\eclipse-workspace\\matrice\\src\\"+filename+".txt"));
		List<String[]> rowActions = new ArrayList<String[]>();
		while (reader.hasNextLine()) {
	        String data = reader.nextLine();
	        String[] mapLine= new String[5];
	        if(data.length() > 0 || data.contains("[a-bA-B]+")) {
	        	String[] action = data.split("->");
	        	if(action[0].contains("<")) {
	        		mapLine[0] = "swap";// R2<->R3
	        		mapLine[1] = action[0].replaceAll("<", "").replaceAll("R", "");
	        		mapLine[2] = action[1].replaceAll("R", "");
	        		mapLine[3] = "1";
	        	}
	        	else{
	        		if(Pattern.compile("[*]").matcher(action[1]).find()) {//has a special character which is *
	        			mapLine[0] = "row switch";
		        		mapLine[1] = action[0].replaceAll("R", "");
		        		mapLine[2] = action[1].split("\\*")[0].replaceAll("R","");
		        		mapLine[3] = action.length == 3 ? "-" +action[2] : action[1].split("\\*")[1].replaceAll("R","");
	        		}
	        		else {//finish last case when R1-R2*8 same as R1 -> R1 + R2*8
	        		mapLine[0] = "scalar";// R2-8 same as R2 -> 8*R2
	        		mapLine[1] = action[0].replaceAll("R", "");
	        		if(Pattern.compile("/").matcher(action[1]).find()) {
	        			mapLine[2] = action[1].split("/")[0];
	        			mapLine[3] = action[1].split("/")[1];
	        			mapLine[4] = "1";
	        		}
	        		else {
		        		mapLine[2] = mapLine[1];
		        		mapLine[3] = action[1];
	        		}
	        		}
	        		
	        		
	        	}
	        	if(!mapLine[0].equals("")) {
	        		rowActions.add(mapLine);
	        		mapLine = new String[4];
	        	}
	        }
		}
		reader.close();
		return rowActions;
	}
}

//example for the file inputa:
1 2 3
4 5 6 
7 8 9

1 0 0
0 1 0
0 0 1

//example for file rowactions:
R2->R1*-4
R3->R1*-7
R3->R2*-2
R2->1/3
R1->R2*2
R2->-1

//this convers the first matrix to a canonical form.


